substitutions:
  name: muse-luxe
  friendly_name: Raspiaudio Muse Luxe
  wakeup_sound_url: "https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/wake_word_triggered.flac"
#States  
  P_starting: "0"
  P_waiting: "1"
  P_playing: "2"
  P_listening: "3"
  P_answering: "4"
  
esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2025.2.0
  name_add_mac_suffix: false
  platformio_options:
    board_build.flash_mode: dio
  project:
    name: raspiaudio.luxeVoice-assistant
    version: "2025.2.2"    
  on_boot:
    priority: -100.0
    then:
      - lambda: id(phase) = 0;
      - script.execute: update_led  
           
        
esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: esp-idf

    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"
      CONFIG_AUDIO_BOARD_CUSTOM: "y"
       

ota:                 
  - platform: esphome
    id: ota_esphome
   
http_request:  
    
api:

wifi:
  ssid: "In_Time"
  password: "Lebdatuw199200"
  ##power_save_mode: none
  ##output_power: 15
  ap:
     ssid: "Raspiaudio-luxe"
     password: "12345678"

captive_portal:

#Bu Satır Yeni 
web_server:
    port: 80
    version: 3

logger:
   #level: DEBUG
   
psram:
  mode: octal
  speed: 80MHz


globals:
  - id: Vol
    type: float
    initial_value: '0.8'     #0.6
  - id: phase
    type: int
    initial_value: '0'    
  - id: mute  
    type: bool
    initial_value: 'false'        
        

light:
  - platform: esp32_rmt_led_strip
    name: None
    id: top_led
    pin: GPIO48
    chipset: WS2812
    num_leds: 1
    rgb_order: grb
#    rmt_channel: 0
    default_transition_length: 0s
    gamma_correct: 2.8
    effects:
      - pulse:
          name: pulse
          transition_length: 250ms
          update_interval: 250ms
      - pulse:
          name: slow_pulse
          transition_length: 1s
          update_interval: 2s

    
i2s_audio:
  - id: i2s_in # For microphone
    i2s_lrclk_pin: GPIO14  #WS 3
    i2s_bclk_pin: GPIO13 #SCK 2

  - id: i2s_speaker #For Speaker
    i2s_lrclk_pin: GPIO7  #LRC 6
    i2s_bclk_pin: GPIO8 #BLCK 7
    

microphone:
  - platform: i2s_audio
    id: luxe_mic
    i2s_audio_id: i2s_in
    sample_rate: 16000
    i2s_din_pin: GPIO15 #4
    bits_per_sample: 16bit
    channel: left
    adc_type: external  
    
speaker:
  - platform: i2s_audio
    id: luxe_speaker
    i2s_audio_id: i2s_speaker
    i2s_dout_pin: GPIO10 #8
    dac_type: external
    sample_rate: 48000
    bits_per_sample: 16bit
    channel: stereo
    buffer_duration: 100ms     
    
  # Virtual speakers to combine the announcement and media streams together into one output
  - platform: mixer
    id: mixing_speaker
    output_speaker: luxe_speaker
    num_channels: 2
    source_speakers:
      - id: announcement_mixing_input
        timeout: never
      - id: media_mixing_input
        timeout: never
        
        
  - platform: resampler
    id: announcement_resampling_speaker
    output_speaker: announcement_mixing_input
    sample_rate: 48000
    bits_per_sample: 16
  - platform: resampler
    id: media_resampling_speaker
    output_speaker: media_mixing_input
    sample_rate: 48000
    bits_per_sample: 16
    
    

media_player:
  - platform: speaker
    name: Media Player
    id: luxe_media_player
    internal: False
    volume_increment: 0.05
    volume_min: 0.5
    volume_max: 0.95
    announcement_pipeline:
      speaker: announcement_resampling_speaker
      format: FLAC     # FLAC is the least processor intensive codec
      num_channels: 1  # Stereo audio is unnecessary for announcements
      sample_rate: 48000
    media_pipeline:
      speaker: media_resampling_speaker
      format: FLAC     # FLAC is the least processor intensive codec
      num_channels: 2
      sample_rate: 48000
    on_announcement:
      - mixer_speaker.apply_ducking:
          id: media_mixing_input
          decibel_reduction: 20
          duration: 0.0s      
    on_state: ###on idle altına tasi 
      - mixer_speaker.apply_ducking:
          id: media_mixing_input
          decibel_reduction: 0
          duration: 1.0s
    on_idle:
      - wait_until:
         and:
          - not:
              media_player.is_announcing:
          - not:
              voice_assistant.is_running:    
      - if:
          condition:              
              lambda: 'return((id(phase) == 4) || (id(phase) == 2));'
          then:
            - lambda: |-
                 id(phase) = 1; 
      - micro_wake_word.start:                                                
      - script.execute: update_led   
    files:
      - id: wake_word_triggered_sound
        file: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/wake_word_triggered.flac
      
      
micro_wake_word:
  id: mww
  models:
    - model: https://github.com/kahrendt/microWakeWord/releases/download/okay_nabu_20241226.3/okay_nabu.json
#    - model: github://emre299/luna/okey_luna.json@main
#    - model: hey_jarvis
#    - model: hey_mycroft
#    - model: alexa
#  vad:
  microphone: luxe_mic
  on_wake_word_detected: 
    - script.execute:
        id: play_sound
        priority: true
        sound_file: !lambda return id(wake_word_triggered_sound);
    - delay: 300ms
    - voice_assistant.start:
        wake_word: !lambda return wake_word;



voice_assistant:
  id: va
  microphone: luxe_mic
  media_player: luxe_media_player
  use_wake_word: false
  noise_suppression_level: 2
  auto_gain: 31dBFS
  volume_multiplier: 2.0
  
  on_listening: 
     - logger.log: "listening 3 => phase"        
     - micro_wake_word.stop: #sil
     - microphone.capture: 
     - lambda: |-
        id(phase) = 3;                            
     - script.execute: update_led

  on_stt_end:
     #- media_player.play_media: !lambda return x;
     - light.turn_on:
        id: top_led
        blue: 60%
        red: 20%
        green: 20%
        effect: pulse
      

  on_tts_start:
     - logger.log: "answering  4 => phase"                   
     - lambda: |-
        id(phase) = 4;
     - script.execute: update_led
                     
  on_error:
    - logger.log: "ERROR!!!!!!!!!!!!!!!!"  
    - light.turn_on:
        id: top_led
        blue: 0%
        red: 100%
        green: 0%
        effect: pulse          
    - delay: 3s
    - lambda: id(phase) = 1;    
    - script.execute: update_led 
  

#########
# Scripts

script:   

  - id: play_sound
    parameters:
      priority: bool
      sound_file: "audio::AudioFile*"
    then:
      - lambda: |-
          if (priority) {
            id(luxe_media_player)
              ->make_call()
              .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_STOP)
              .set_announcement(true)
              .perform();
          }
          if ((id(luxe_media_player).state != media_player::MediaPlayerState::MEDIA_PLAYER_STATE_ANNOUNCING) || priority) {
            id(luxe_media_player)->play_file(sound_file, true, false);
          }


  - id: update_led
    then:  
       - logger.log: "==>>>update_led" 
       - lambda: |-
             if(id(phase) == 0)id(start).execute();
             if(id(phase) == 1)id(waiting).execute();  
             if(id(phase) == 2)id(external_player).execute();                      
             if(id(phase) == 3)id(listening).execute();
             if(id(phase) == 4)id(answering).execute();
                         
  - id: start           
    then:
     - light.turn_on:
          id: top_led
          effect: slow_pulse
          red: 80%
          green: 0%
          blue: 80%             
     ##- delay: 5sec
     ##- lambda: id(my_es8388).setup();
     ##- output.turn_off: dac_mute
     - lambda: id(phase) = 1;
     - script.execute: update_led
     
  - id: waiting
    then:
     - light.turn_on:
          id: top_led
          #effect: pulse
          red: 0%
          green: 0%
          blue: 20% 
          brightness: 50% #100
     - voice_assistant.stop:              
     - micro_wake_word.start:                       
       

  - id: listening
    then:
     - light.turn_on:
          id: top_led
          effect: pulse
          red: 0%
          green: 100%
          blue: 0%                      
          brightness: 50%       
          
  - id: answering
    then:
     - light.turn_on:
          id: top_led
          effect: none
          red: 100%
          green: 100%
          blue: 0%                     
          brightness: 50%       
          
  - id: external_player
    then:
     - light.turn_on:
          id: top_led
          effect: none
          red: 80%
          green: 40%
          blue: 0%                      
             
  - id: mute_on
    then:
       - media_player.volume_set:
            volume: '0'
       - lambda: id(mute) = true;
       
  - id: mute_off
    then:
       - media_player.volume_set:
            volume: !lambda return(id(Vol));
       - lambda: id(mute) = false;             
            
            
            
      
      
                    
